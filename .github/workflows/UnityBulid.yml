name: Unity Bulid

on:
  pull_request: {}
  push: { branches: [main, master, develop] }
  workflow_dispatch:
env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  PROJECT_PATH: .

jobs:
  checklicense:
    name: check if UNITY_LICENSE is set in github secrets
    runs-on: self-hosted
    outputs:
      is_unity_license_set: ${{ steps.checklicense_job.outputs.is_unity_license_set }}
    steps:
      - name: Check whether unity activation requests should be done
        id: checklicense_job
        run: |
            echo "Skip activation job: ${{ env.UNITY_LICENSE != '' }}"
            echo "::set-output name=is_unity_license_set::${{ env.UNITY_LICENSE != '' }}"
     # - run: apt-get update && apt-get install git-lfs
     # - run: apt-get remove docker docker-engine docker.io containerd runc
     # - run: sudo service docker start
  activation:
    needs: [checklicense]
    if: needs.checklicense.outputs.is_unity_license_set == 'false'
    name: Update License ðŸ”‘
    runs-on: self-hosted
    environment: production
    steps:
     - name: Update License
       uses: ./.github/workflows/Activation.yml

  buildAndTestForLinuxBasedPlatforms:
    needs: [checklicense]
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: self-hosted
    strategy:
      fail-fast: false
      matrix:
        projectPath:
          - test-project
        unityVersion:
            - 2021.3.4f1
        targetPlatform:
          - StandaloneLinux64 # Build a Linux 64-bit standalone.
          #- iOS # Build an iOS player.
          #- Android # Build an Android player.
          #- WebGL # WebGL.
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          lfs: true
      - uses: actions/cache@v2
        with:
          path: ${{ matrix.projectPath }}/Library
          key:
            Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}-${{
            hashFiles(matrix.projectPath) }}
          restore-keys: |
            Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}-
            Library-${{ matrix.projectPath }}-
            Library-
      - uses: game-ci/unity-test-runner@v2
        id: testRunner
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          projectPath: ${{ matrix.projectPath }}
          unityVersion: ${{ matrix.unityVersion }}
          githubToken: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Test results (all modes)
          path: ${{ steps.testRunner.outputs.artifactsPath }}
      - uses: game-ci/unity-builder@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: ${{ matrix.projectPath }}
          unityVersion: ${{ matrix.unityVersion }}
          targetPlatform: ${{ matrix.targetPlatform }}
          customParameters: '-myParameter myValue -myBoolean -ThirdParameter andItsValue'
      - uses: actions/upload-artifact@v2
        with:
          name: Build
          path: build
